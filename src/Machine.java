/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import Database.Database;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.sql.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Vector;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import security.CurrentUser;

/**
 *
 * @author Administrator
 */
public class Machine extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Machine.class.getName());

    /**
     * Creates new form Machine
     */
    public Machine() {
      
    
           addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
            logOutButton.doClick();
              
            }
        });
        this.setExtendedState(this.MAXIMIZED_BOTH);
        initComponents();
        AutoCompleteDecorator.decorate(addItemsComboBox);
    }

    /**
     * this This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TransactionTable = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        addItem = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        addItemsComboBox = new javax.swing.JComboBox<>();
        Enter = new javax.swing.JButton();
        Payment = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        paymentMethodComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        PaymentRecievedField = new javax.swing.JTextField();
        changeField = new javax.swing.JTextField();
        completeTransactionButton = new javax.swing.JButton();
        CountChange = new javax.swing.JToggleButton();
        jLabel23 = new javax.swing.JLabel();
        productPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Pos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TransactionsTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        SubTotal1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        discountField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        TotalAmountText = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        TotalAmountText1 = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        ProcessButton = new javax.swing.JButton();
        voidButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Process = new javax.swing.JPanel();
        PaymentButton = new javax.swing.JButton();
        Products = new javax.swing.JPanel();
        RefreshItem2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ItemsTable = new javax.swing.JTable();
        RefreshItem3 = new javax.swing.JButton();
        Transactions = new javax.swing.JPanel();
        TransactionTable1 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        RefreshTransactions = new javax.swing.JButton();
        Settings = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        count = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        TotalAmount = new javax.swing.JLabel();
        TotalSales = new javax.swing.JLabel();
        logOutButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        RefreshTransactions1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        userName = new javax.swing.JLabel();
        machineID = new javax.swing.JLabel();
        machineName = new javax.swing.JLabel();
        machineLocation = new javax.swing.JLabel();
        currentTime = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jTable2.setBackground(new java.awt.Color(153, 153, 153));
        jTable2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "PRODUCT", "USER", "DEVICE", "QUANTITY", "SALETIME", "TOTAL", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setResizingAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
        TransactionTable.setViewportView(jTable2);

        addItem.setMaximumSize(new java.awt.Dimension(522, 185));
        addItem.setPreferredSize(new java.awt.Dimension(522, 185));

        jLabel13.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel13.setText("Search Item To add");

        addItemsComboBox.setEditable(true);
        addItemsComboBox.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        addItemsComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addItemsComboBoxMouseClicked(evt);
            }
        });
        addItemsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemsComboBoxActionPerformed(evt);
            }
        });

        Enter.setText("Enter");
        Enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EnterMouseClicked(evt);
            }
        });
        Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(184, 184, 184))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(addItemsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(Enter)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(29, 29, 29)
                .addComponent(addItemsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(Enter)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addItemLayout = new javax.swing.GroupLayout(addItem);
        addItem.setLayout(addItemLayout);
        addItemLayout.setHorizontalGroup(
            addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        addItemLayout.setVerticalGroup(
            addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel2.setText("Payment");

        paymentMethodComboBox.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        paymentMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Online", "Bank" }));

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel7.setText("Payment Method");

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel8.setText("Payment Recieved:");

        PaymentRecievedField.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N

        changeField.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        changeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        changeField.setFocusable(false);
        changeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeFieldActionPerformed(evt);
            }
        });

        completeTransactionButton.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        completeTransactionButton.setText("Complete Transaction");
        completeTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeTransactionButtonActionPerformed(evt);
            }
        });

        CountChange.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 12)); // NOI18N
        CountChange.setText("Count");
        CountChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountChangeActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel23.setText("Change:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(199, 199, 199))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addGap(18, 18, 18)
                        .addComponent(changeField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(178, 178, 178))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(completeTransactionButton)
                        .addGap(153, 153, 153))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(PaymentRecievedField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CountChange)))
                .addGap(27, 27, 27))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(49, 49, 49)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(PaymentRecievedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CountChange))
                .addGap(30, 30, 30)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(28, 28, 28)
                .addComponent(completeTransactionButton)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PaymentLayout = new javax.swing.GroupLayout(Payment);
        Payment.setLayout(PaymentLayout);
        PaymentLayout.setHorizontalGroup(
            PaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        PaymentLayout.setVerticalGroup(
            PaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Terminal");
        setBackground(java.awt.Color.darkGray);
        setSize(new java.awt.Dimension(1280, 720));

        productPanel.setBackground(java.awt.Color.white);
        productPanel.setPreferredSize(new java.awt.Dimension(1280, 720));

        jTabbedPane1.setBackground(java.awt.Color.white);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1280, 720));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        TransactionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TransactionsTable.setEnabled(false);
        jScrollPane1.setViewportView(TransactionsTable);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel1.setText("Subtotal:");

        SubTotal1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        SubTotal1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SubTotal1.setText("SubTotal");

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel3.setText("Discount:");

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N

        discountField.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        discountField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        discountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel5.setText("%(Total)");

        total.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        total.setText("Total:");

        TotalAmountText.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        TotalAmountText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TotalAmountText.setText("TotalAmount");

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel6.setText("Tax:");

        jLabel20.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel20.setText("Pesos");

        jLabel22.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel22.setText("Pesos");

        TotalAmountText1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 12)); // NOI18N
        TotalAmountText1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "12", "0" }));

        jLabel24.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel24.setText("%");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1)
                            .addComponent(total))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SubTotal1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discountField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(TotalAmountText))
                            .addComponent(TotalAmountText1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SubTotal1)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalAmountText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total)
                    .addComponent(TotalAmountText)
                    .addComponent(jLabel20))
                .addContainerGap(197, Short.MAX_VALUE))
        );

        ProcessButton.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        ProcessButton.setText("Process");
        ProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessButtonActionPerformed(evt);
            }
        });

        voidButton.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        voidButton.setText("Void");
        voidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voidButtonActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jButton3.setText("Transactions");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ProcessButton)
                        .addGap(36, 36, 36)
                        .addComponent(voidButton)))
                .addContainerGap(171, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProcessButton)
                    .addComponent(voidButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(216, Short.MAX_VALUE))
        );

        PaymentButton.setText("Payment Method");
        PaymentButton.setEnabled(false);
        PaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProcessLayout = new javax.swing.GroupLayout(Process);
        Process.setLayout(ProcessLayout);
        ProcessLayout.setHorizontalGroup(
            ProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 259, Short.MAX_VALUE)
            .addGroup(ProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ProcessLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(PaymentButton)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        ProcessLayout.setVerticalGroup(
            ProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(ProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ProcessLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(PaymentButton)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout PosLayout = new javax.swing.GroupLayout(Pos);
        Pos.setLayout(PosLayout);
        PosLayout.setHorizontalGroup(
            PosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PosLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Process, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        PosLayout.setVerticalGroup(
            PosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(PosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(PosLayout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 72, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(PosLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(Process, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Terminal", Pos);

        Products.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ProductsComponentShown(evt);
            }
        });

        RefreshItem2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        RefreshItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png"))); // NOI18N
        RefreshItem2.setText("Refresh");
        RefreshItem2.setBorder(null);
        RefreshItem2.setBorderPainted(false);
        RefreshItem2.setPreferredSize(new java.awt.Dimension(50, 50));
        RefreshItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshItem2ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 36)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/items.png"))); // NOI18N
        jLabel11.setText("Items");

        ItemsTable.setAutoCreateRowSorter(true);
        ItemsTable.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        ItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Category", "Quantity", "Price", "Supplier", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ItemsTable.setColumnSelectionAllowed(true);
        ItemsTable.getTableHeader().setResizingAllowed(false);
        ItemsTable.getTableHeader().setReorderingAllowed(false);
        ItemsTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ItemsTableFocusGained(evt);
            }
        });
        ItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemsTableMouseClicked(evt);
            }
        });
        ItemsTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ItemsTableComponentShown(evt);
            }
        });
        jScrollPane5.setViewportView(ItemsTable);
        ItemsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (ItemsTable.getColumnModel().getColumnCount() > 0) {
            ItemsTable.getColumnModel().getColumn(0).setResizable(false);
            ItemsTable.getColumnModel().getColumn(1).setResizable(false);
            ItemsTable.getColumnModel().getColumn(2).setResizable(false);
            ItemsTable.getColumnModel().getColumn(3).setResizable(false);
            ItemsTable.getColumnModel().getColumn(4).setResizable(false);
            ItemsTable.getColumnModel().getColumn(5).setResizable(false);
            ItemsTable.getColumnModel().getColumn(6).setResizable(false);
        }

        RefreshItem3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        RefreshItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        RefreshItem3.setText("Add ");
        RefreshItem3.setBorder(null);
        RefreshItem3.setBorderPainted(false);
        RefreshItem3.setPreferredSize(new java.awt.Dimension(50, 50));
        RefreshItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshItem3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProductsLayout = new javax.swing.GroupLayout(Products);
        Products.setLayout(ProductsLayout);
        ProductsLayout.setHorizontalGroup(
            ProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(ProductsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RefreshItem3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(RefreshItem2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(201, 201, 201))
        );
        ProductsLayout.setVerticalGroup(
            ProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProductsLayout.createSequentialGroup()
                .addGroup(ProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(ProductsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RefreshItem3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RefreshItem2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Products", Products);

        jTable3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ORDERID", "ID", "PRODUCT", "USER", "DEVICE", "QUANTITY", "SALETIME", "TOTAL", "PAYMENTMETHOD", "STATUS", "REVENUE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.getTableHeader().setResizingAllowed(false);
        jTable3.getTableHeader().setReorderingAllowed(false);
        TransactionTable1.setViewportView(jTable3);

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 36)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Transactions.png"))); // NOI18N
        jLabel10.setText("Transaction Sales");

        RefreshTransactions.setBackground(java.awt.Color.lightGray);
        RefreshTransactions.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        RefreshTransactions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png"))); // NOI18N
        RefreshTransactions.setText("Refresh");
        RefreshTransactions.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RefreshTransactions.setBorderPainted(false);
        RefreshTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshTransactionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TransactionsLayout = new javax.swing.GroupLayout(Transactions);
        Transactions.setLayout(TransactionsLayout);
        TransactionsLayout.setHorizontalGroup(
            TransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionsLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(TransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(TransactionsLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(616, 616, 616)
                        .addComponent(RefreshTransactions))
                    .addComponent(TransactionTable1, javax.swing.GroupLayout.PREFERRED_SIZE, 1071, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        TransactionsLayout.setVerticalGroup(
            TransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(RefreshTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TransactionTable1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Transactions", Transactions);

        jPanel1.setPreferredSize(new java.awt.Dimension(444, 350));
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 48)); // NOI18N
        jLabel9.setText("MPOS");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(307, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(156, 156, 156))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel19.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 24)); // NOI18N
        jLabel19.setText("Machine Summary");

        count.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 24)); // NOI18N
        count.setText("Total Sales:");

        jLabel21.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 24)); // NOI18N
        jLabel21.setText("Total Sale Amount:");

        TotalAmount.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        TotalAmount.setText("0.00");

        TotalSales.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        TotalSales.setText("0");

        logOutButton.setBackground(java.awt.Color.lightGray);
        logOutButton.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        logOutButton.setText("Logout");
        logOutButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TotalAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(count)
                        .addGap(34, 34, 34)
                        .addComponent(TotalSales, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(306, 306, 306))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(246, 246, 246)
                .addComponent(jLabel19)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addGap(45, 45, 45)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TotalSales, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(count))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(TotalAmount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        RefreshTransactions1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        RefreshTransactions1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png"))); // NOI18N
        RefreshTransactions1.setText("Refresh");
        RefreshTransactions1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RefreshTransactions1.setBorderPainted(false);
        RefreshTransactions1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshTransactions1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RefreshTransactions1)
                .addGap(52, 52, 52))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(RefreshTransactions1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(198, 198, 198))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel12.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel12.setText("User:");

        jLabel14.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel14.setText("Informations");

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel15.setText("Machine ID:");

        jLabel16.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel16.setText("Machine Name:");

        jLabel17.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel17.setText("Machine Location:");

        jLabel18.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        jLabel18.setText("Current Time:");

        userName.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        userName.setText("User:");

        machineID.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        machineID.setText("User:");

        machineName.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        machineName.setText("User:");

        machineLocation.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        machineLocation.setText("User:");

        currentTime.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        currentTime.setText("User:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(machineID))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(machineName))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(machineLocation))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentTime))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(userName)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addGap(24, 24, 24)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(userName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(machineID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(machineName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(machineLocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(currentTime))
                .addContainerGap(185, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SettingsLayout = new javax.swing.GroupLayout(Settings);
        Settings.setLayout(SettingsLayout);
        SettingsLayout.setHorizontalGroup(
            SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SettingsLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 894, Short.MAX_VALUE)
                .addContainerGap())
        );
        SettingsLayout.setVerticalGroup(
            SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SettingsLayout.createSequentialGroup()
                .addGroup(SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SettingsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89))
                    .addGroup(SettingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Settings", Settings);

        jButton1.setText("jButton1");

        javax.swing.GroupLayout productPanelLayout = new javax.swing.GroupLayout(productPanel);
        productPanel.setLayout(productPanelLayout);
        productPanelLayout.setHorizontalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1274, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(productPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        productPanelLayout.setVerticalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productPanelLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(productPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("CutomerView");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(productPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(productPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void discountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_discountFieldActionPerformed

    private void ProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessButtonActionPerformed
        // TODO add your handling code here:

        if (TransactionsTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "No Orders");
        } else {
            int choice = JOptionPane.showConfirmDialog(
                    null,
                    "Finalize Transaction?",
                    "MPOS",
                    JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                Product prods = new Product();
                RefreshItem3.setEnabled(false);

                double subTotal = prods.getTotal();
                String getTax = TotalAmountText1.getSelectedItem().toString();
                double tax = 0;
                if(getTax.equalsIgnoreCase("12")) {
                    tax = 0.12;
                    System.out.println("0.12");
                }
                String strDisc = discountField.getText();
                DecimalFormat df = new DecimalFormat("#.00");
                double totalWithTax = (subTotal * 0.12) + subTotal;
                if (!strDisc.isBlank()) {
                    double discount = Double.parseDouble(strDisc) / 100;
                    if(tax == 0.12) {
                    double discountAmount = discount * totalWithTax;
                    double totalAmount = totalWithTax - discountAmount;
                    SubTotal1.setText(df.format(totalWithTax));
                    TotalAmountText.setText(df.format(totalAmount));
                    PaymentButton.setEnabled(true);
                    repaint();
                    revalidate();
                    }
                    else if(tax == 0)  {
                    double discountAmount = discount * subTotal;
                    double totalAmount = subTotal - discountAmount;
                    SubTotal1.setText(df.format(subTotal));
                    TotalAmountText.setText(df.format(totalAmount));
                    PaymentButton.setEnabled(true);
                    repaint();
                    revalidate();
                    }
                  
                } else {
                    if(tax == 0.12) {
                    SubTotal1.setText(df.format(totalWithTax));
                    TotalAmountText.setText(df.format(totalWithTax));
                    PaymentButton.setEnabled(true);
                    }
                    else if(tax == 0) {
                     SubTotal1.setText(df.format(subTotal));
                    TotalAmountText.setText(df.format(subTotal));
                    PaymentButton.setEnabled(true);
                    }
                   
                    
                }

            }

        }


    }//GEN-LAST:event_ProcessButtonActionPerformed

    private void voidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voidButtonActionPerformed
        // TODO add your handling code here:
        try {
            String getText = TotalAmountText.getText();
            if (TransactionsTable.getRowCount() <= 0) {
                JOptionPane.showMessageDialog(null, "No Orders");
           
            } else if (getText.equalsIgnoreCase("TotalAmount") || getText.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please Process Order First!");

            } else {
                int choice = JOptionPane.showConfirmDialog(
                        null,
                        "Void Transaction?",
                        "MPOS",
                        JOptionPane.YES_NO_OPTION);
                if (choice == 0) {
                    String totalAmount = TotalAmountText.getText();

                    double total = Double.parseDouble(totalAmount);
                    LocalDateTime currentDate = LocalDateTime.now();
                    DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                    String datee = currentDate.format(format);
                    Product prods = new Product(); // reusable code perhaps??
                    Database b = new Database();
                    Connection con = b.getCon();
                    Random rand = new Random();
                    String abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
                    String randString = "";
                    for (int i = 0; i < 5; i++) {
                        char letter = abc.charAt(rand.nextInt(abc.length()));
                        randString += letter;
                    }

                    double subTotal = prods.getTotal();

                    Statement stmt = con.createStatement();

                    String filename = "log.txt";
                    CurrentUser currentUser = null;
                    FileInputStream file = new FileInputStream(filename);
                    ObjectInputStream in = new ObjectInputStream(file);
                    currentUser = (CurrentUser) in.readObject();
                    file.close();
                    in.close();
                    Product prod = new Product();
                    String updateTransaction = "insert into transactions (order_id,id,products,user,device,saletime,total,payment_method,revenue,total_cost,status) values (?,?,?,?,?,?,?,?,?,?,?);";
                    PreparedStatement prep = con.prepareStatement(updateTransaction);
                    prep.setString(1, randString);
                    prep.setString(2, currentUser.getCurrentUserID());
                    prep.setInt(3, prod.getQuantityTotal());
                    prep.setString(4, currentUser.getCurrentUserName());
                    prep.setString(5, currentUser.getCurrentMachine());
                    prep.setString(6, datee);
                    prep.setDouble(7, total);
                    prep.setString(8, "N/A");
                    prep.setString(9, "0.00");
                    prep.setString(10, "0.00");
                    prep.setString(11, "Voided");
                    prep.executeUpdate();
                    
                    HashMap<Integer,Integer> prodss = prods.getMap();
                    DefaultTableModel model = (DefaultTableModel) TransactionsTable.getModel();
                    model.setRowCount(0);
                    PaymentButton.setEnabled(false);
                    SubTotal1.setText("SubTotal");
                    discountField.setText(" ");
                    TotalAmountText.setText("TotalAmount");
                    RefreshItem3.setEnabled(true);
                    prodss.clear();
                    prod.resetQuantitProds();
                    prod.resetRevenueCost();
                     prods.resetTotals();
                    JOptionPane.showMessageDialog(null, "Voided Orders");

                }

            }
        } catch (Exception e) {
            System.out.println("Error: +e"+e);
        }

    }//GEN-LAST:event_voidButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_jButton3ActionPerformed


    private void ItemsTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ItemsTableComponentShown
        // TODO add your handling code here:
        try {
            Database b = new Database();
            Connection con = b.getCon();
            Statement stmt = con.createStatement();
            String sqlSuppliers = "Select * from items";
            ResultSet rs = stmt.executeQuery(sqlSuppliers);

            String[] columnNames = {"ID", "Name", "Category", "Tax", "Quantity", "Price", "Supplier", "Description"};

            DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

            while (rs.next()) {
                String Id = rs.getString("id");
                String name = rs.getString("name");
                String Category = rs.getString("category");
                String Tax = rs.getString("tax");
                String Quantity = rs.getString("quantity");
                String Price = rs.getString("price");
                String Supplier = rs.getString("supplier");
                String Description = rs.getString("description");

                // create a single array of one row's worth of data
                String[] data = {Id, name, Category, Tax, Quantity, Price, Supplier, Description};
                tableModel.addRow(data);
                String[] names = {name};

            }
            ItemsTable.setModel(tableModel);
            repaint();
            revalidate();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Retrieving Data");
        }

    }//GEN-LAST:event_ItemsTableComponentShown

    private void ItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemsTableMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_ItemsTableMouseClicked

    private void RefreshItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshItem2ActionPerformed
        try {
            Database b = new Database();
            Connection con = b.getCon();
            Statement stmt = con.createStatement();
            String sqlSuppliers = "Select * from items";
            ResultSet rs = stmt.executeQuery(sqlSuppliers);

            String[] columnNames = {"ID", "Name", "Category", "Quantity", "Price", "Supplier", "Description"};

            DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

            while (rs.next()) {
                String Id = rs.getString("id");
                String name = rs.getString("name");
                String Category = rs.getString("category");
                String Quantity = rs.getString("quantity");
                String Price = rs.getString("price");
                String Supplier = rs.getString("supplier");
                String Description = rs.getString("description");

                // create a single array of one row's worth of data
                String[] data = {Id, name, Category, Quantity, Price, Supplier, Description};
                tableModel.addRow(data);
                String[] names = {name};

            }
            ItemsTable.setModel(tableModel);
            repaint();
            revalidate();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Retrieving Data");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_RefreshItem2ActionPerformed

    private void RefreshItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshItem3ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, addItem);
    }//GEN-LAST:event_RefreshItem3ActionPerformed

    private void addItemsComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemsComboBoxMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_addItemsComboBoxMouseClicked

    private void addItemsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemsComboBoxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_addItemsComboBoxActionPerformed

    private void ItemsTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ItemsTableFocusGained
        // TODO add your handling code here:
        try {
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

            Database b = new Database();
            Connection con = b.getCon();
            Statement stmt = con.createStatement();
            String sqlComboBox = "Select name from items";
            ResultSet rs = stmt.executeQuery(sqlComboBox);
            while (rs.next()) {
                String names = rs.getString("name");
                model.addElement(names);
            }
            addItemsComboBox.setModel(model);
        } catch (Exception e) {

        }

    }//GEN-LAST:event_ItemsTableFocusGained
    public static void main(String[] args) {

        java.awt.EventQueue.invokeLater(() -> new Machine().setVisible(true));
        RefreshTransactions1.doClick();
        RefreshItem2.doClick();
        RefreshTransactions.doClick();
     
       
              

        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    static HashMap<Integer, Integer> moew = null;
    static ArrayList<Double> totals = new ArrayList<>();
    static  ArrayList<Integer> quantityProds = new ArrayList<>();
    static ArrayList<Product> recieptTaker = new ArrayList<>();
    static ArrayList<Product> unitCosts = new ArrayList<>();
    
    private void EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterActionPerformed
        // TODO add your handling code here:
        try {

            String name = addItemsComboBox.getSelectedItem().toString();
            Database b = new Database();
            Connection con = b.getCon();
            double sum;
            ArrayList<Product> prods = new ArrayList<>();
           
            
            String sql = "select id,name,category,quantity,price,unit_cost from items where name = ?";
            PreparedStatement prep = con.prepareStatement(sql);
            prep.setString(1, name);
            ResultSet rs = prep.executeQuery();
            // hashmap for subtraction of quantity if completed

            int id = 0;
            String names = "";
            String category = "";
            int quantity = 0;
            double price = 0;
            double cost = 0;
            Product c = new Product();
            while (rs.next()) {

                id = rs.getInt("id");
                names = rs.getString("name");
                category = rs.getString("category");
                quantity = rs.getInt("quantity");
                cost = rs.getDouble("unit_cost");
                price = rs.getDouble("price");

            }

            moew = c.getMap();
            if (quantity >= 1) {
                String quan = JOptionPane.showInputDialog("Enter Quantity: ");
                int quantityProd = Integer.parseInt(quan);
                
                if (quantityProd <= quantity) {

                    if (moew.containsKey(id)) {
                        int quantityOfItem = quantity - moew.get(id);
                        if (quantityProd <= quantityOfItem) {
                            Product products = new Product(id, names, category, quantityProd, price);
                            Product recieptTake = new Product(names, quantityProd, price);
                            Product revenueCount = new Product(names,cost,quantityProd);
                            unitCosts.add(revenueCount);
                            c.setRevenueCost(unitCosts);
                            
                            prods.add(products);
                            quantityProds.add(quantityProd);
                            sum = price * quantityProd;
                            totals.add(sum);

                            c.addMap(id,quantityProd);
                            c.setTotalQuantity(quantityProds);
                            c.setTotal(totals);
                            recieptTaker.add(recieptTake);
                         
                            
                            // idk find a way for the roiw inserstion
                            DefaultTableModel model = (DefaultTableModel) TransactionsTable.getModel();
                            int rows = model.getRowCount();

                            if (TransactionsTable.getColumnCount() == 0) {
                                model.addColumn("ID");
                                model.addColumn("Product");
                                model.addColumn("Category");
                                model.addColumn("Quantity");
                                model.addColumn("Price");
                                model.addColumn("Price");
                            }
                          

                            for (int i = 0; i <= prods.size(); i++) {
                                Vector<Integer> prodID = new Vector<>(Arrays.asList(prods.get(i).getProductID()));
                                Vector<String> prodName = new Vector<>(Arrays.asList(prods.get(i).getProductName()));
                                Vector<String> prodCategory = new Vector<>(Arrays.asList(prods.get(i).getProductCategory()));
                                Vector<Integer> prodQuantity = new Vector<>(Arrays.asList(prods.get(i).getQuantity()));
                                Vector<Double> prodPrice = new Vector<>(Arrays.asList(prods.get(i).getPrice()));

                                Vector<Object> row = new Vector<Object>();

                                row.addElement(prodID.get(0));
                                row.addElement(prodName.get(0));
                                row.addElement(prodCategory.get(0));
                                row.addElement(prodQuantity.get(0));
                                row.addElement(prodPrice.get(0));

                                model.addRow(row);

                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid Quantity");

                        }
                    } else {
                        Product products = new Product(id, names, category, quantityProd, price);
                        Product recieptTake = new Product(names,quantityProd,price);
                        prods.add(products);
                        Product revenueCount = new Product(names, cost, quantityProd);
                        unitCosts.add(revenueCount);
                        revenueCount.setRevenueCost(unitCosts);
                        quantityProds.add(quantityProd);
                        sum = price * quantityProd;
                        totals.add(sum);
                        c.addMap(id, quantityProd);
                        c.setTotalQuantity(quantityProds);
                        c.setTotal(totals);
                        recieptTaker.add(recieptTake);

                            
                        // idk find a way for the roiw inserstion
                        DefaultTableModel model = (DefaultTableModel) TransactionsTable.getModel();
                        int rows = model.getRowCount();

                        if (TransactionsTable.getColumnCount() == 0) {
                            model.addColumn("ID");
                            model.addColumn("Product");
                            model.addColumn("Category");
                            model.addColumn("Quantity");
                            model.addColumn("Price");
                        }
                       
                        

                        for (int i = 0; i <= prods.size(); i++) {
                            Vector<Integer> prodID = new Vector<>(Arrays.asList(prods.get(i).getProductID()));
                            Vector<String> prodName = new Vector<>(Arrays.asList(prods.get(i).getProductName()));
                            Vector<String> prodCategory = new Vector<>(Arrays.asList(prods.get(i).getProductCategory()));
                            Vector<Integer> prodQuantity = new Vector<>(Arrays.asList(prods.get(i).getQuantity()));
                            Vector<Double> prodPrice = new Vector<>(Arrays.asList(prods.get(i).getPrice()));

                            Vector<Object> row = new Vector<Object>();

                            row.addElement(prodID.get(0));
                            row.addElement(prodName.get(0));
                            row.addElement(prodCategory.get(0));
                            row.addElement(prodQuantity.get(0));
                            row.addElement(prodPrice.get(0));

                            model.addRow(row);
                           

                        }

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Invalid Amount");

                }

            } else {
                JOptionPane.showMessageDialog(null, "Unable To Add Product (No Stock)");

            }
            repaint();
            revalidate();
        } catch (Exception e) {
        }


    }//GEN-LAST:event_EnterActionPerformed

    private void ProductsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ProductsComponentShown
        // TODO add your handling code here:
        try {
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

            Database b = new Database();
            Connection con = b.getCon();
            Statement stmt = con.createStatement();
            String sqlComboBox = "Select name from items";
            ResultSet rs = stmt.executeQuery(sqlComboBox);
            while (rs.next()) {
                String names = rs.getString("name");
                model.addElement(names);
            }
            addItemsComboBox.setModel(model);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_ProductsComponentShown

    private void EnterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EnterMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_EnterMouseClicked

    private void PaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentButtonActionPerformed
        // TODO add your handling code here:
        changeField.setText(" ");
        completeTransactionButton.setEnabled(true);
        JOptionPane.showMessageDialog(null, Payment);


    }//GEN-LAST:event_PaymentButtonActionPerformed

    private void changeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeFieldActionPerformed

    private void CountChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountChangeActionPerformed
        // TODO add your handling code here:

        String totalAmount = TotalAmountText.getText();
        String paymentRecieved = PaymentRecievedField.getText();

        double paymentParsed = Double.parseDouble(paymentRecieved);
        double total = Double.parseDouble(totalAmount);
        if (paymentParsed >= total) {
            double change = paymentParsed - total;
            NumberFormat formatter = new DecimalFormat("#0.00");
            changeField.setText(formatter.format(change));
        } else {
            JOptionPane.showMessageDialog(null, "Invalid Amount");
        }

        repaint();
        revalidate();


    }//GEN-LAST:event_CountChangeActionPerformed

    private void completeTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeTransactionButtonActionPerformed
        // TODO add your handling code here:
        try {
            String tax = "";
            String totalAmount = TotalAmountText.getText();
            String paymentRecieved = PaymentRecievedField.getText();
            String stringTax = TotalAmountText1.getSelectedItem().toString();
            if(stringTax.equalsIgnoreCase("0")) {
                tax = "Zero";
            }
            double paymentParsed = Double.parseDouble(paymentRecieved);
            double total = Double.parseDouble(totalAmount);
            if (paymentParsed < total) {
                JOptionPane.showMessageDialog(null, "Invalid Amount");
            } else {
                String filename = "log.txt";
                CurrentUser currentUser = null;
                FileInputStream file = new FileInputStream(filename);
                ObjectInputStream in = new ObjectInputStream(file);
                currentUser = (CurrentUser) in.readObject();
                file.close();
                in.close();
                Random rand = new Random();
                LocalDateTime currentDate = LocalDateTime.now();
                String abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
                String randString = "";
                for (int i = 0; i < 5; i++) {
                    char letter = abc.charAt(rand.nextInt(abc.length()));
                    randString += letter;
                }
                String paymentMethod = paymentMethodComboBox.getSelectedItem().toString();
                DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                String datee = currentDate.format(format);
                Product prod = new Product();
                ArrayList<Product> unitCosts = prod.getRevenueCost();
                double totalUnitCost = 0;
                for(int i = 0; i < unitCosts.size(); i++) {
                    String productName = unitCosts.get(i).getProductName();
                    double productUnitCost = unitCosts.get(i).getUnitCost();
                    int productQuantity = unitCosts.get(i).getQuantity();
                    double sums = productUnitCost * productQuantity;
                    totalUnitCost += sums;
                    
                }
                double revenue = total - totalUnitCost;
                
                Database b = new Database();
                Connection con = b.getCon();
                Statement stmt = con.createStatement();
                String updateTransaction = "insert into transactions (order_id,id,products,user,device,saletime,total,payment_method,revenue,total_cost,status) values (?,?,?,?,?,?,?,?,?,?,?);";
                PreparedStatement prep = con.prepareStatement(updateTransaction);
                prep.setString(1,randString );
                prep.setString(2, currentUser.getCurrentUserID());
                prep.setInt(3, prod.getQuantityTotal());
                prep.setString(4, currentUser.getCurrentUserName());
                prep.setString(5, currentUser.getCurrentMachine());
                prep.setString(6, datee);
                prep.setDouble(7, total);
                prep.setString(8, paymentMethod);
                prep.setDouble(9, revenue);
                prep.setDouble(10,totalUnitCost );
                prep.setString(11, "Completed");
                prep.executeUpdate();

                // update quantity
                String updateQuant = "update items set quantity = quantity - ? where id = ?;";
                String getQuantity = "Select quantity from items where id = ?";

                PreparedStatement updateQuan = con.prepareStatement(updateQuant);
                PreparedStatement getQuant = con.prepareStatement(getQuantity);
                HashMap<Integer, Integer> prodss = prod.getMap();
                
               
                // loop through the hashmap
                int itemQuantity = 0;

                for (Map.Entry<Integer, Integer> entry : prodss.entrySet()) {

                    int id = entry.getKey();
                    int quantity = entry.getValue();
                    getQuant.setInt(1, id);
                    ResultSet rs = getQuant.executeQuery();
                    while (rs.next()) {
                        itemQuantity = rs.getInt("quantity");
                    }
                    if (itemQuantity > 0) {
                        updateQuan.setInt(1, quantity);
                        updateQuan.setInt(2, id);
                        updateQuan.executeUpdate();
                    }

                }
                DefaultTableModel model = (DefaultTableModel) TransactionsTable.getModel();
                 int choice = JOptionPane.showConfirmDialog(
                    null,
                    "Print Reciept?",
                    "MPOS",
                    JOptionPane.YES_NO_OPTION);
                if(choice == 0) {
                    int rows = model.getRowCount();
                    LocalDateTime currentDatee = LocalDateTime.now();
                    DateTimeFormatter formats = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                   
                    String filenamem = "C:\\Mpos\\MposReciepts\\MposReciepts"+ formats.format(currentDatee) + "_"+randString+"_log"+"_.txt";
  
                     
                  
                  String recieptHeader= "                           MPOS                           \n"
                                      + "                       "+currentUser.getCurrentMachine()+"                       \n"
                                      + "                       "+currentUser.getCurrentLocation()+"                      \n"
                                      + "                       "+currentUser.getCurrentUserID()+"           `            \n"
                                      + "                       "+randString+"           `                                \n"
                                      + "                                                          \n"
                                      + "                      Sales Invoice                       \n"
                                      + "Cashier: " + currentUser.getCurrentUserName()+"           \n"
                                      + "==========================================================\n"
                                      + "Date: "+datee+"                                           \n"
                                      + "==========================================================\n"
                                      + "Items:                                            "+rows+"\n";
                  String subTotall = SubTotal1.getText();
                  DecimalFormat formatter = new DecimalFormat("###,###,##0.00");
                  double parsedTotal = Double.parseDouble(subTotall);
                  double VatableSale = parsedTotal / 1.12;
                  String VatabeSaleFinal = formatter.format(VatableSale);
                  String totalTotal = TotalAmountText.getText();
                  Double taxAmount = parsedTotal * 0.12;
                  String taxAMT = formatter.format(taxAmount);
                  String custChange = changeField.getText();
                  String custPayement = PaymentRecievedField.getText();
                  String recieptBody  = "==========================================================\n"
                                      + "SubTotal:                                    "+subTotall+"\n"
                                      + "VATABLE SALES:                               "+VatabeSaleFinal+"\n"
                                      + "VAT AMT:                                     "+taxAMT+"   \n"
                                      + "==========================================================\n"
                                      + "TOTAL:                                    PHP "+totalTotal+"\n"
                                      + "Cash:                                         "+custPayement+"\n"
                                       + "Change:                                   "+custChange+"\n"
                                      + "Payement Method:                            "+paymentMethod+"\n"
                                      + "==========================================================\n"
                                      + "Cust Name:_______________________________________________ \n"
                                      + "  Address:_______________________________________________ \n"
                                      + "  TIN:___________________________________________________ \n"
                                      + "  SIGN:__________________________________________________ \n"
                                      + "==========================================================\n"
                                      + "                                                          \n"
                                      + "               Thank you For Shopping With Us!            \n"
                                      + "                                                          \n"
                                      + "==========================================================\n";
                  String recieptBodyWithZeroTax  = "==========================================================\n"
                                      + "SubTotal:                                    "+subTotall+"\n"
                                      + "VATABLE SALES:                               "+tax+"\n"
                                      + "VAT AMT:                                     "+tax+"   \n"
                                      + "==========================================================\n"
                                      + "TOTAL:                                    PHP "+totalTotal+"\n"
                                      + "Cash:                                         "+custPayement+"\n"
                                       + "Change:                                   "+custChange+"\n"
                                      + "Payement Method:                            "+paymentMethod+"\n"
                                      + "==========================================================\n"
                                      + "Cust Name:_______________________________________________ \n"
                                      + "  Address:_______________________________________________ \n"
                                      + "  TIN:___________________________________________________ \n"
                                      + "  SIGN:__________________________________________________ \n"
                                      + "==========================================================\n"
                                      + "                                                          \n"
                                      + "               Thank you For Shopping With Us!            \n"
                                      + "                                                          \n"
                                      + "==========================================================\n";

                  
                    
                    
                    FileWriter filem = new FileWriter(filenamem, true);
                    filem.write(recieptHeader);
                    for(int i = 0; i < recieptTaker.size(); i++) {
                        
                        String productName = recieptTaker.get(i).getProductName();
                        int productQuantity = recieptTaker.get(i).getQuantity();
                        double productPrice =recieptTaker.get(i).getPrice();

                        
                        String productsList =   " "+productName+"                                          \n"
                                              + " "+productQuantity+"                                      \n"
                                              + " "+productPrice+"                                         \n";
                        
                        filem.write(productsList);
                    }
                    recieptTaker.clear();
                   
             if (tax.equalsIgnoreCase("Zero")) {
                        filem.write(recieptBodyWithZeroTax);

                    } else {
                        filem.write(recieptBody);
                    }
        
                    JOptionPane.showMessageDialog(null, "Reciept Made!");
                    filem.close();

                    
                    
                    
                    
                 
                }
                
                
                
                
                prodss.clear();
                prod.resetQuantitProds();
                prod.resetTotals();
                
              
                model.setRowCount(0);
                PaymentButton.setEnabled(false);
                SubTotal1.setText("SubTotal");
                discountField.setText(" ");
                TotalAmountText.setText("TotalAmount");
                RefreshItem3.setEnabled(true);
                PaymentRecievedField.setText(" ");
                JOptionPane.showMessageDialog(null, "Transaction Completed!");
                RefreshItem3.setEnabled(true);
                PaymentButton.setEnabled(false);
                completeTransactionButton.setEnabled(false);
            }
            
            

            repaint();
            revalidate();
        } catch (Exception e) {
            System.out.println("ERrorL: "+ e);
        }


    }//GEN-LAST:event_completeTransactionButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        // TODO add your handling code here:
        CurrentUser user =  null;
        
          
        int n = JOptionPane.showConfirmDialog(
                null,
                "Log out of the current session?",
                "Confirmation Logout",
                JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            try {
                  String filenamess = "log.txt";
                CurrentUser currentUserrr = null;
                FileInputStream file = new FileInputStream(filenamess);
                ObjectInputStream in = new ObjectInputStream(file);
                user = (CurrentUser) in.readObject();
                file.close();
                in.close();
                Database b = new Database();
                Connection con = b.getCon();
                Statement stmt = con.createStatement();

                String sqlUpdateUser = "update staffandadmin set status = 'Offline', activeCount = 0 where id = ? ";
                String sqlUpdateMachine = "update machines set status = 'Offline' where name = ?;";

                PreparedStatement prep = con.prepareStatement(sqlUpdateUser);
                PreparedStatement prep2 = con.prepareStatement(sqlUpdateMachine);

                prep.setString(1, user.getCurrentUserID());
                prep2.setString(1, user.getCurrentMachine());
                
                prep.executeUpdate();
                prep2.executeUpdate();
                
                user.setCurrentUserName(null);
                user.setCurrentUserID(null);
                user.setCurrentMachine(null);
                user.setCurrentLocation(null);
                user.setCurrentRole(null);
                CurrentUser resetUser = new CurrentUser(user.getCurrentUserName(),user.getCurrentUserID(),user.getCurrentMachine(),user.getCurrentLocation(),user.getCurrentRole());
                String filename = "log.txt";
                FileOutputStream files = new FileOutputStream(filename);
                ObjectOutputStream out = new ObjectOutputStream(files);
                out.writeObject(user);
                out.close();
                file.close();
                java.awt.EventQueue.invokeLater(() -> new Menu().setVisible(true));
                dispose();

            } catch (Exception e) {
                System.out.println("Error: "+e);
            }

        }
    }//GEN-LAST:event_logOutButtonActionPerformed


    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        // TODO add your handling code here:


    }//GEN-LAST:event_jPanel1ComponentShown

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        try {

          

            String filenamess = "log.txt";
                CurrentUser currentUserrr = null;
                FileInputStream file = new FileInputStream(filenamess);
                ObjectInputStream in = new ObjectInputStream(file);
                currentUserrr = (CurrentUser) in.readObject();
                file.close();
                in.close();
            
            userName.setText(currentUserrr.getCurrentUserName());
            machineID.setText(currentUserrr.getCurrentUserID());
            machineName.setText(currentUserrr.getCurrentMachine());
            machineLocation.setText(currentUserrr.getCurrentLocation());
            LocalDateTime currentDate = LocalDateTime.now();
            DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
            SimpleDateFormat formatTime = new SimpleDateFormat("HH:mm:ss");
            currentTime.setText("" + currentDate.format(format));
        

            
            
            
          
            repaint();
            revalidate();
        } catch (Exception e) {
            System.out.println("E: "+e);
        }


    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void RefreshTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshTransactionsActionPerformed
        // TODO add your handling code here:
       try {
            String filenamess = "log.txt";
                CurrentUser currentUserrr = null;
                FileInputStream file = new FileInputStream(filenamess);
                ObjectInputStream in = new ObjectInputStream(file);
                currentUserrr = (CurrentUser) in.readObject();
                file.close();
                in.close();
            Database b = new Database();
            Connection con = b.getCon();
            Statement stmt = con.createStatement();
            
            String sqlTransactions = "Select order_id,id,products,user,device,saletime,total,payment_method,revenue,status from transactions where id = ? ";
             PreparedStatement prep = con.prepareStatement(sqlTransactions);
             prep.setString(1, currentUserrr.getCurrentUserID());
             ResultSet rs = prep.executeQuery();
             String[] columnNames = {"OrderID","ID", "Products", "User","Device","SaleTime","Total","Payment Method","Revenue","Status"};
             
             DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
             Employee emp = new Employee();
            while (rs.next()) {
                String orderID = rs.getString("order_id");
                String Id = rs.getString("ID");
                String Product = rs.getString("Products");
                String User = rs.getString("User");
                String Device = rs.getString("Device");
                String SaleTime = rs.getString("SaleTime");
                String Total = rs.getString("Total");
                String paymentMethod = rs.getString("payment_method");
                String Revenue = rs.getString("revenue");
                String Status = rs.getString("Status");
                if(Status.equalsIgnoreCase("Voided")) {
                    Revenue = "0.00";
                }
               
               
                // create a single array of one row's worth of data
                String[] data = {orderID,Id, Product, User,Device,SaleTime,Total,paymentMethod,Revenue,Status};
                tableModel.addRow(data);
            }
            jTable3.setModel(tableModel);
            repaint();
            revalidate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Retrieving data");
        }
      

    }//GEN-LAST:event_RefreshTransactionsActionPerformed

    private void RefreshTransactions1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshTransactions1ActionPerformed
        // TODO add your handling code here:
         try {
            Database b = new Database();
            Connection con = b.getCon();
            Statement stmt = con.createStatement();
             String filenamess = "log.txt";
            CurrentUser currentUserrr = null;
            FileInputStream file = new FileInputStream(filenamess);
            ObjectInputStream in = new ObjectInputStream(file);
            currentUserrr = (CurrentUser) in.readObject();
            file.close();
             in.close();
             String sqlGetSuccessfullSales = "select sum(revenue) from transactions where status ='Completed' and id = ?;";

             String sqlGetCount = "select count(*) from transactions where id = ?;";
             String sqlGetCountSales = "select sum(revenue) from transactions where id  = ?;";
             
             PreparedStatement prep1 = con.prepareStatement(sqlGetSuccessfullSales);
             PreparedStatement prep2 = con.prepareStatement(sqlGetCount);
             PreparedStatement prep3 = con.prepareStatement(sqlGetCountSales);
             
             prep1.setString(1, currentUserrr.getCurrentUserID());
             prep2.setString(1, currentUserrr.getCurrentUserID());
             
             ResultSet rs1 = prep1.executeQuery();
             ResultSet rs2 = prep2.executeQuery();
             while(rs1.next()) {
                 TotalAmount.setText(""+rs1.getDouble(1));
             }
             while(rs2.next()) {
                 TotalSales.setText(""+rs2.getInt(1));
             }
            
         
            repaint();
            revalidate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Retrieving data"+e);
        }
    }//GEN-LAST:event_RefreshTransactions1ActionPerformed

    /**
     * @param args the command line arguments
     */
    static ArrayList<String> productList = new ArrayList<>();


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton CountChange;
    private javax.swing.JButton Enter;
    private javax.swing.JTable ItemsTable;
    private javax.swing.JPanel Payment;
    private javax.swing.JButton PaymentButton;
    private javax.swing.JTextField PaymentRecievedField;
    private javax.swing.JPanel Pos;
    private javax.swing.JPanel Process;
    private javax.swing.JButton ProcessButton;
    private javax.swing.JPanel Products;
    private static javax.swing.JButton RefreshItem2;
    private javax.swing.JButton RefreshItem3;
    private static javax.swing.JButton RefreshTransactions;
    private static javax.swing.JButton RefreshTransactions1;
    private javax.swing.JPanel Settings;
    private javax.swing.JLabel SubTotal1;
    private javax.swing.JLabel TotalAmount;
    private javax.swing.JLabel TotalAmountText;
    private javax.swing.JComboBox<String> TotalAmountText1;
    private javax.swing.JLabel TotalSales;
    private javax.swing.JScrollPane TransactionTable;
    private javax.swing.JScrollPane TransactionTable1;
    private javax.swing.JPanel Transactions;
    private javax.swing.JTable TransactionsTable;
    private javax.swing.JPanel addItem;
    private javax.swing.JComboBox<String> addItemsComboBox;
    private javax.swing.JTextField changeField;
    private javax.swing.JButton completeTransactionButton;
    private javax.swing.JLabel count;
    private javax.swing.JLabel currentTime;
    private javax.swing.JTextField discountField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JButton logOutButton;
    private javax.swing.JLabel machineID;
    private javax.swing.JLabel machineLocation;
    private javax.swing.JLabel machineName;
    private javax.swing.JComboBox<String> paymentMethodComboBox;
    private javax.swing.JPanel productPanel;
    private javax.swing.JLabel total;
    private javax.swing.JLabel userName;
    private javax.swing.JButton voidButton;
    // End of variables declaration//GEN-END:variables
}
